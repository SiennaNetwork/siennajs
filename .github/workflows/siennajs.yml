name: SiennaJS tarball release
on: [push]

jobs:
  js:
    name: check, build, fix, and release
    runs-on: ubuntu-latest
    steps:

      - name: Get source
        uses: actions/checkout@v3
        with: { submodules: recursive }

        #see: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
      - name: Get version from package.json and tag from CI state
        id:   version
        run:  |
          echo "::set-output name=tag::$(printf $GITHUB_REF | cut -c11-)"
          echo "::set-output name=version::$(cat package.json | jq -r .version)"

      - name: Get Node 16
        uses: actions/setup-node@v3
        with: { node-version: 16 }

      - name: Get PNPM
        run:  npm i -g pnpm@^7.5.2

      - name: Don't compile native modules
        run:  pnpm config set node-gyp /bin/true

      - name: Install deps
        run:  pnpm i

      - name: Test with Jest
        run:  echo "TODO" # npm run jest

      - name: Test with Ensuite
        run:  echo "TODO" # npm test

      - name: Check types
        run:  npm run check

      - name: Build for packaging
        run:  npm run ubik fix

      - name: Replace version in package.json with version from tag
        if:   startsWith(github.ref, 'refs/tags/')
        run: |
          PKG="$(jq '.version = "${{ steps.version.outputs.tag }}"' package.json)" && echo -E "${PKG}" > package.json

      - name: Package as tarball
        run:  echo "::set-output name=file::$(npm pack | tail -n1)"
        id:   pack

      - name: Check that tarball can be installed
        run: |
          export SRC=$(pwd)
          export TAG=${{ steps.version.outputs.tag }}
          mkdir /tmp/downstream
          cd /tmp/downstream
          echo "{}" > package.json
          npm i --save $SRC/${{ steps.pack.outputs.file }}
          cat package.json
          node -e 'import("siennajs").then(console.log)'
          node -e 'console.log(require("siennajs"))'
          npm i --save typescript
          echo 'import * as SiennaJS from "siennajs"' > index.ts
          npm exec tsc -- --target es5 --esModuleInterop true index.ts
          echo "{\"type\":\"module\",\"dependencies\":{\"siennajs\":\"$URL/$TAG/siennajs-$TAG.tgz\"}}" > package.json
          node -e 'import("siennajs").then(console.log)'
          node -e 'console.log(require("siennajs"))'
          npm exec tsc -- --target es5 --esModuleInterop true index.ts
          cd $SRC
          rm -rf /tmp/downstream

      - name: Package as CJS and ESM bundles
        run: |
          npm run bundle:esm
          npm run bundle:cjs

      - name: Upload release
        if:   startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: SiennaJS ${{ steps.version.outputs.tag }}
          body: 'Install from GitHub Releases with NPM:

            ```sh

            npm i --save https://github.com/SiennaNetwork/siennajs/releases/download/${{ steps.version.outputs.tag }}/siennajs-${{ steps.version.outputs.tag }}.tgz

            ```

            [![Automated release by https://github.com/softprops/action-gh-release](https://img.shields.io/badge/automated%20release%20by-softprops%2Faction--gh--release-blueviolet)](https://github.com/marketplace/actions/gh-release)'
          files: |
            LICENSE
            bundles/*
            ${{ steps.pack.outputs.file }}

      - name: Check that release can be installed
        if:   startsWith(github.ref, 'refs/tags/')
        run: |
          export TAG=${{ steps.version.outputs.tag }}
          export URL=https://github.com/SiennaNetwork/siennajs/releases/download
          mkdir /tmp/downstream
          cd /tmp/downstream
          echo "{\"dependencies\":{\"siennajs\":\"$URL/$TAG/siennajs-$TAG.tgz\"}}" > package.json
          cat package.json
          npm i
          node -e 'import("siennajs").then(console.log)'
          node -e 'console.log(require("siennajs"))'
          npm i --save typescript
          echo 'import * as SiennaJS from "siennajs"' > index.ts
          echo '{"compilerOptions":{"target":"es5"},"esModuleInterop":true}' > tsconfig.json
          npm exec tsc -- --target es5 --esModuleInterop true index.ts
          echo "{\"type\":\"module\",\"dependencies\":{\"siennajs\":\"$URL/$TAG/siennajs-$TAG.tgz\"}}" > package.json
          node -e 'import("siennajs").then(console.log)'
          node -e 'console.log(require("siennajs"))'
          npm exec tsc -- --target es5 --esModuleInterop true index.ts
